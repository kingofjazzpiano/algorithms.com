<./.gitignore>
db.sqlite3
db.sqlite3-journal
static/
venv/
documentation/sphinx_docs/build/
structurizr-lite/
structurizr-ui

*.pyc
__pycache__/


staticfiles/


<./Dockerfile>
FROM python

RUN apt update && \
	apt install micro -y && \
    apt install -y nginx && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /algorithms.com

COPY . /algorithms.com/

RUN pip install --upgrade pip && \
    pip install poetry && \
    poetry config virtualenvs.create false && \
    poetry install

EXPOSE 8000

CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]


<./LICENSE>
MIT License

Copyright (c) 2024 kingofjazzpiano

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


<./README.md>
# Algorithms Com Project


<./deploy_site.sh>
#!/bin/bash

alias rm='rm -i'
source ~/.bashrc
sudo apt update
sudo apt install micro -y
sudo apt install apt-transport-https ca-certificates curl software-properties-common -y
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
echo | sudo add-apt-repository "deb [arch=arm64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt update
sudo apt install docker-ce -y
docker build --no-cache -t algorithms.com . --progress=plain | tee build.log
docker rm -f algocontainer
docker rmi -f algorithms.com
docker run -it -p 8000:8000 --name algocontainer algorithms.com


<./documentation/admin.py>
from django.contrib import admin

# Register your models here.


<./documentation/apps.py>
from django.apps import AppConfig


class DocumentationConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'documentation'


<./documentation/models.py>
from django.db import models

# Create your models here.


<./documentation/sphinx_docs/Makefile>
# Minimal makefile for Sphinx documentation
#

# You can set these variables from the command line, and also
# from the environment for the first two.
SPHINXOPTS    ?=
SPHINXBUILD   ?= sphinx-build
SOURCEDIR     = source
BUILDDIR      = build

# Put it first so that "make" without argument is like "make help".
help:
	@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)

.PHONY: help Makefile

# Catch-all target: route all unknown targets to Sphinx using the new
# "make mode" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).
%: Makefile
	@$(SPHINXBUILD) -M $@ "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)


<./documentation/sphinx_docs/code_editor_features.txt>

Code editor features:
	- Languages: Python, C
	- Save/share code like godbolt.org
  - Delete a file of code if it has not been viewed for more than a year.
  - AI assistant
  - Syntax highlights
  - Changing font size. 12 by default
  - Scroll bars at the bottom and side


<./documentation/sphinx_docs/code_guidelines.md>
## Code Guidelines

- Typed Python Code: Use type annotations in all functions and methods.
- No Inheritance: Favor composition and aggregation over class inheritance for better flexibility and maintainability


<./documentation/sphinx_docs/main_features.txt>
Main Page Features (Basic functionality):
	- Algorithm Visualization Tab. Visualization must match the description on the Review Tab.
	- Code Editor Tab
	- AI code assistant
	- Debugging like pythontutor.com, step backward feature
	- RAM Visualization Tab
	- menu with algorithms/data structures list
	- discussion tab. 1 page for evey algorithm or user's code.
	- Algorithm Review Tab with asymptoric graphics, animations (gif?), see also links list, other resources links, link to algorithm on algorithms.com. Ability to change font size (12 by default).
	- Tutorial with backlight for new users
	- Ability to change scale for RAM tab and Algorithms Visualization tab. Zoom in/out (+/-) buttons
	- Ability to open and close tabs
	- Ability to resize tabs. The scale should not change.
	- Ability to move tabs
	- Buttons:
[<<first] jump to start of code,
[<o] previous breakpoint,
[< step back] previous line that was executed,
[>play speed: x2] executing code at a certain speed, that can be changed;
[> step in] step into function,
[> step out] step without entering a function,
[o>] next breakpoint,
[>>last] execution of all code.
	- Full screen button 
	- Search with hint: "Enter algorithm or data structure or keyword" (faded)

algorithms.com/docs features:
	- Breadcrumbs: Implement breadcrumbs to help users understand their location within the site and documentation.


<./documentation/sphinx_docs/make.bat>
@ECHO OFF

pushd %~dp0

REM Command file for Sphinx documentation

if "%SPHINXBUILD%" == "" (
	set SPHINXBUILD=sphinx-build
)
set SOURCEDIR=source
set BUILDDIR=build

%SPHINXBUILD% >NUL 2>NUL
if errorlevel 9009 (
	echo.
	echo.The 'sphinx-build' command was not found. Make sure you have Sphinx
	echo.installed, then set the SPHINXBUILD environment variable to point
	echo.to the full path of the 'sphinx-build' executable. Alternatively you
	echo.may add the Sphinx directory to PATH.
	echo.
	echo.If you don't have Sphinx installed, grab it from
	echo.https://www.sphinx-doc.org/
	exit /b 1
)

if "%1" == "" goto help

%SPHINXBUILD% -M %1 %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%
goto end

:help
%SPHINXBUILD% -M help %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%

:end
popd


<./documentation/sphinx_docs/menu_structure.txt>
Algorithms
	Sorts
		Bogosort
		Prmutation Sort (Bit trick set permutation)
		Gnome Sort
		Bubble Sort
		Selection Sort
		Insertion Sort
		Pancake Sort (блинная)
		Comb Sort (расчёской)
		Shell Sort (Шелла)
		Quick Sort
		Merge Sort
		Bucket Sort
		Radix Sort
		Counting Sort
		*Sorts on GPU
	Binary Search
	Depth-First Search
	Breadth-First Search
	Dijkstra's Algorithm
	Knuth's X algorithm on bit matrix
	Knuth's X algorithm with Dancing Links
	Inverse Fourier Transform
	Fast Fourier Transform
	Narayana's algorithm
	Knuth–Morris–Pratt algorithm 
	Boyer–Moore algorithm
	Aho–Corasick algorithm
	Rabin–Karp algorithm
	Array Reverse
	Array Rotation
	Array Shuffle
	List Reverse
	Singly Linked List Reverse
	Matrix Rotation
	Bit Rotation
	Bit Matrix Rotation
	Bit Matrix Transform

Data Structures
	Tuple
	Static Array
 	Stack
	Deque
  	Queue
 	Dynamic Array
	Singly Linked List
	Double Linked List
  	Random List
	Heap
  	Hash Table
  	Set
  	Graph
  	Tree (which?)
  	Binary Search Tree
  	Red-Black Tree
  	AVL Tree
Hybrid Structures
	List + Array
	List + Dictionary
  


<./documentation/sphinx_docs/source/conf.py>
# Configuration file for the Sphinx documentation builder.
#
# For the full list of built-in configuration values, see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Project information -----------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information

project = 'algorithms.com'
copyright = '2024, kingofjazzpiano'
author = 'kingofjazzpiano'

# -- General configuration ---------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration

extensions = []

templates_path = ['_templates']
exclude_patterns = []



# -- Options for HTML output -------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output

html_theme = 'sphinx_rtd_theme'
html_static_path = ['_static']


<./documentation/sphinx_docs/source/index.rst>
.. algorithms.com documentation master file, created by
   sphinx-quickstart on Sun Oct 27 07:50:16 2024.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

algorithms.com documentation
============================

Add your content using ``reStructuredText`` syntax. See the
`reStructuredText <https://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html>`_
documentation for details.


.. toctree::
   :maxdepth: 2
   :caption: Contents:
   
   tools



<./documentation/sphinx_docs/source/tools.rst>
Tools
============================


This project is built with:

- **PEP**: Compliance with `PEP8 <https://peps.python.org/pep-0008/>`_ and `PEP257 <https://peps.python.org/pep-0257/>_ is strictly required`
- **Docs**: `Sphinx <https://www.sphinx-doc.org/en/master/>`_ with theme provided by `Read the Docs <https://readthedocs.org>`_
- **Backend**: `Django <https://www.djangoproject.com/>`_, Django Rest Framework
- **Database**: SQLite3
- **Frontend**: Vue.js
- **Web server**: Nginx or Gunicorn
- **Python package manager**: poetry


Planned to be added:

- D3.js or Chart.js: Create dynamic and interactive visualizations for algorithms, such as RAM visualization and animations.
- Monaco Editor or CodeMirror: Provide an embedded code editor with syntax highlighting, auto-completion, and other IDE-like features.
- Vuex: Manage the state of your Vue.js application, especially useful for handling complex data interactions.
- Vue Router: Handle client-side routing for your Vue.js application. Enables smooth navigation between different views without full page reloads.
- Axios: Make HTTP requests from your Vue.js frontend to your Django REST API
- JSON Web Tokens: Provides a stateless authentication mechanism that works well with DRF and frontend frameworks.
- Django Allauth: Handle user registration, login, and social authentication.
- Redis: Implement caching mechanisms to speed up data retrieval and reduce databreal-time
- Vuetify or BootstrapVue: Utilize pre-built UI components and styles for your Vue.js frontend. Accelerates frontend development with responsive and aesthetically pleasing components.
- Nuxt.js (optional): Enhance Vue.js applications with server-side rendering for better SEO. Improves search engine visibility and initial load performance.
- Docker


Tools:

- Structurizr(Structurizr Lite?) for building interactive C4 diagrams
- PyTest or Django’s Testing Framework
- Jest and Vuereadability
- ChatGPT for code improvements. Why not?
- ESLint and Prettier: Maintains a consistent codebase, reducing bugs and improving readability
- Swagger: Automatically generate interactive API documentation from your DRF endpoints.
- Sphinx + Read the Docs: Create comprehensive project documentation
- Sentry: Monitor application errors and performance issues in real-time
- Prometheus and Grafana: Monitor application metrics and visualize performance data.
- GitHub Actions CI/CD: Automate testing, building, and deployment processes.
- Benefit: Ensures that your code is consistently tested and deployed efficiently, reducing manual overhead.


Summary:

- Frontend Enhancements: D3.js/Chart.js, Monaco Editor, Vuex, Vue Router
- API and Data Handling: Axios
- Authentication: JWT, Django Allauth
- Development Tools: Webpack/Vite, ESLint, Prettier
- Containerization: Docker, Docker Compose
- Testing: PyTest, Jest, Vue Test Utils
- Documentation: Swagger/ReDoc, MkDocs/Sphinx
- Performance: Redis
- Monitoring: Sentry, Prometheus, Grafana
- Collaboration: GitHub/GitLab
- CI/CD: GitHub Actions/GitLab CI
- UI Framework: Vuetify/BootstrapVue
- Analytics: Google Analytics/Matomo
- Asynchronous Tasks: Celery, Celery Beat


<./documentation/templates/documentation/architecture.html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Site Architecture</title>
    <style>
        /* Optional: Set iframe dimensions */
        iframe {
            width: 100%;
            height: 800px;
            border: none;
        }
    </style>
</head>
<body>
    <h1>Site Architecture</h1>
    <!-- Embed Structurizr Lite using an iframe -->
    <iframe src="http://localhost:8080" title="Site Architecture"></iframe>
</body>
</html>


<./documentation/tests.py>
from django.test import TestCase

# Create your tests here.


<./documentation/urls.py>
from django.urls import path
from django.views.generic import RedirectView

from . import views


urlpatterns = [
    path("", RedirectView.as_view(
            url="../static/documentation/html/index.html",
            permanent=False)),
    path('architecture/', views.architecture_view, name='architecture'),
]


<./documentation/views.py>
from django.shortcuts import render

def architecture_view(request):
    return render(request, 'documentation/architecture.html')


<./manage.py>
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


<./project/asgi.py>
"""
ASGI config for project project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')

application = get_asgi_application()


<./project/settings.py>
"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-fg#0ow0jtjim(g9$gt(ezi5n-frtw8x)$kt*ojgv)#341ja2(c'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'documentation',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


<./project/urls.py>
"""
URL configuration for project project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.views.generic import RedirectView


urlpatterns = [
    path('admin/', admin.site.urls),
    path('docs/', include('documentation.urls')),
    #path("docs/", RedirectView.as_view(
     #           url="/static/documentation/html/index.html",
      #          permanent=False)),
]


<./project/wsgi.py>
"""
WSGI config for project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')

application = get_wsgi_application()


<./pyproject.toml>
[tool.poetry]
name = "algorithms.com"
version = "0.1.0"
description = ""
authors = ["kingofjazzpiano <mrkingofjazzpiano@gmail.com>"]
license = "MIT"
readme = "README.md"
package-mode = false


[tool.poetry.dependencies]
python = ">=3.12,<4.0"
Django = "^5.1.2"
Sphinx = "^8.1.3"
sphinx-rtd-theme = "^3.0.1"
requests = "^2.32.3"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


<./repo2text.sh>
#!/bin/bash

# Check if a repository URL is provided
if [ $# -ne 1 ]; then
    echo "Usage: $0 <github-repository-url>"
    exit 1
fi

# Extract repository name from URL
REPO_URL=$1
REPO_NAME=$(basename "$REPO_URL" .git)

# Create a temporary directory
mkdir tmp
TEMP_DIR=tmp
cd "$TEMP_DIR" || exit

# Clone the repository
echo "Cloning repository..."
git clone "$REPO_URL" || exit 1
cd "$REPO_NAME" || exit 1

# Create output file
OUTPUT_FILE="../${REPO_NAME}.txt"
touch "$OUTPUT_FILE"

# Function to check if a file is binary
is_binary() {
    mime=$(file -b --mime-encoding "$1")
    if [[ "$mime" == "binary" ]]; then
        return 0
    else
        return 1
    fi
}

# Find all files, excluding .git directory and binary files
find . -type f -not -path "./.git/*" | while read -r file; do
    # Skip binary files
    if is_binary "$file"; then
        continue
    fi
    
    # Skip empty files
    if [ ! -s "$file" ]; then
        continue
    fi
    
    echo "Processing: $file"
    
    # Add filename header
    echo "<$file>" >> "$OUTPUT_FILE"
    # Add file content
    cat "$file" >> "$OUTPUT_FILE"
    # Add newlines for separation
    echo -e "\n" >> "$OUTPUT_FILE"
done

# Move output file to current directory
mv "$OUTPUT_FILE" "$PWD/../../${REPO_NAME}.txt"

# Clean up
cd "../.."
rm -rf "$TEMP_DIR"

echo "Repository contents have been saved to ${REPO_NAME}.txt"


<./run_structurizr.sh>
#!/bin/bash
java -jar structurizr-lite/build/libs/structurizr-lite.war structurizr_workspace


<./structurizr_workspace/workspace.dsl>
workspace "Name" "Description" {

    !identifiers hierarchical

    model {
        contributor = person "Contributor" "The guy who helps the project develop"
        student = person "Student" "The man who wants to eat dog on algorithms"
        site = softwareSystem "Site algorithms.com" {
            site = container "Site algorithms.com"
            db = container "Database Schema" {
                tags "Database"
            }
        }
        contributor -> site.site "Improves site algorithms.com"
        student -> site.site "Grinding Computer Science"
        site.site -> site.db "Reads from and writes to"
    }

    views {
        systemContext site "SoftwareSystem" {
            include *
            autolayout lr
        }

        container site "Containers" {
            include *
            autolayout lr
        }

        styles {
            element "Person" {
                shape person
            }
            element "Database" {
                shape cylinder
            }
        }
    }

    configuration {
        scope softwaresystem
    }

}


<./structurizr_workspace/workspace.json>
{
  "configuration" : {
    "scope" : "SoftwareSystem"
  },
  "description" : "Description",
  "documentation" : { },
  "id" : 1,
  "lastModifiedDate" : "2024-10-29T16:39:37Z",
  "model" : {
    "people" : [ {
      "description" : "The guy who helps the project develop",
      "id" : "1",
      "location" : "Unspecified",
      "name" : "Contributor",
      "properties" : {
        "structurizr.dsl.identifier" : "contributor"
      },
      "relationships" : [ {
        "description" : "Improves site algorithms.com",
        "destinationId" : "4",
        "id" : "6",
        "properties" : {
          "structurizr.dsl.identifier" : "8497ae5f-29da-4fb4-ba73-b787a5d60f67"
        },
        "sourceId" : "1",
        "tags" : "Relationship"
      }, {
        "description" : "Improves site algorithms.com",
        "destinationId" : "3",
        "id" : "7",
        "linkedRelationshipId" : "6",
        "sourceId" : "1"
      } ],
      "tags" : "Element,Person"
    }, {
      "description" : "The man who wants to eat dog on algorithms",
      "id" : "2",
      "location" : "Unspecified",
      "name" : "Student",
      "properties" : {
        "structurizr.dsl.identifier" : "student"
      },
      "relationships" : [ {
        "description" : "Grinding Computer Science",
        "destinationId" : "4",
        "id" : "8",
        "properties" : {
          "structurizr.dsl.identifier" : "165740d1-0e31-4369-8416-e30ad88039fd"
        },
        "sourceId" : "2",
        "tags" : "Relationship"
      }, {
        "description" : "Grinding Computer Science",
        "destinationId" : "3",
        "id" : "9",
        "linkedRelationshipId" : "8",
        "sourceId" : "2"
      } ],
      "tags" : "Element,Person"
    } ],
    "softwareSystems" : [ {
      "containers" : [ {
        "documentation" : { },
        "id" : "4",
        "name" : "Site algorithms.com",
        "properties" : {
          "structurizr.dsl.identifier" : "site.site"
        },
        "relationships" : [ {
          "description" : "Reads from and writes to",
          "destinationId" : "5",
          "id" : "10",
          "properties" : {
            "structurizr.dsl.identifier" : "13a99645-591f-4521-88e7-2c683f278dce"
          },
          "sourceId" : "4",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container"
      }, {
        "documentation" : { },
        "id" : "5",
        "name" : "Database Schema",
        "properties" : {
          "structurizr.dsl.identifier" : "site.db"
        },
        "tags" : "Element,Container,Database"
      } ],
      "documentation" : { },
      "id" : "3",
      "location" : "Unspecified",
      "name" : "Site algorithms.com",
      "properties" : {
        "structurizr.dsl.identifier" : "site"
      },
      "tags" : "Element,Software System"
    } ]
  },
  "name" : "Name",
  "properties" : {
    "structurizr.dsl" : "d29ya3NwYWNlICJOYW1lIiAiRGVzY3JpcHRpb24iIHsKCiAgICAhaWRlbnRpZmllcnMgaGllcmFyY2hpY2FsCgogICAgbW9kZWwgewogICAgICAgIGNvbnRyaWJ1dG9yID0gcGVyc29uICJDb250cmlidXRvciIgIlRoZSBndXkgd2hvIGhlbHBzIHRoZSBwcm9qZWN0IGRldmVsb3AiCiAgICAgICAgc3R1ZGVudCA9IHBlcnNvbiAiU3R1ZGVudCIgIlRoZSBtYW4gd2hvIHdhbnRzIHRvIGVhdCBkb2cgb24gYWxnb3JpdGhtcyIKICAgICAgICBzaXRlID0gc29mdHdhcmVTeXN0ZW0gIlNpdGUgYWxnb3JpdGhtcy5jb20iIHsKICAgICAgICAgICAgc2l0ZSA9IGNvbnRhaW5lciAiU2l0ZSBhbGdvcml0aG1zLmNvbSIKICAgICAgICAgICAgZGIgPSBjb250YWluZXIgIkRhdGFiYXNlIFNjaGVtYSIgewogICAgICAgICAgICAgICAgdGFncyAiRGF0YWJhc2UiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29udHJpYnV0b3IgLT4gc2l0ZS5zaXRlICJJbXByb3ZlcyBzaXRlIGFsZ29yaXRobXMuY29tIgogICAgICAgIHN0dWRlbnQgLT4gc2l0ZS5zaXRlICJHcmluZGluZyBDb21wdXRlciBTY2llbmNlIgogICAgICAgIHNpdGUuc2l0ZSAtPiBzaXRlLmRiICJSZWFkcyBmcm9tIGFuZCB3cml0ZXMgdG8iCiAgICB9CgogICAgdmlld3MgewogICAgICAgIHN5c3RlbUNvbnRleHQgc2l0ZSAiU29mdHdhcmVTeXN0ZW0iIHsKICAgICAgICAgICAgaW5jbHVkZSAqCiAgICAgICAgICAgIGF1dG9sYXlvdXQgbHIKICAgICAgICB9CgogICAgICAgIGNvbnRhaW5lciBzaXRlICJDb250YWluZXJzIiB7CiAgICAgICAgICAgIGluY2x1ZGUgKgogICAgICAgICAgICBhdXRvbGF5b3V0IGxyCiAgICAgICAgfQoKICAgICAgICBzdHlsZXMgewogICAgICAgICAgICBlbGVtZW50ICJQZXJzb24iIHsKICAgICAgICAgICAgICAgIHNoYXBlIHBlcnNvbgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsZW1lbnQgIkRhdGFiYXNlIiB7CiAgICAgICAgICAgICAgICBzaGFwZSBjeWxpbmRlcgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGNvbmZpZ3VyYXRpb24gewogICAgICAgIHNjb3BlIHNvZnR3YXJlc3lzdGVtCiAgICB9Cgp9"
  },
  "views" : {
    "configuration" : {
      "branding" : { },
      "lastSavedView" : "Containers",
      "styles" : {
        "elements" : [ {
          "shape" : "Person",
          "tag" : "Person"
        }, {
          "shape" : "Cylinder",
          "tag" : "Database"
        } ]
      },
      "terminology" : { }
    },
    "containerViews" : [ {
      "automaticLayout" : {
        "applied" : false,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "LeftRight",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "elements" : [ {
        "id" : "1",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "2",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "4",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "5",
        "x" : 0,
        "y" : 0
      } ],
      "externalSoftwareSystemBoundariesVisible" : false,
      "key" : "Containers",
      "order" : 2,
      "relationships" : [ {
        "id" : "10"
      }, {
        "id" : "6"
      }, {
        "id" : "8"
      } ],
      "softwareSystemId" : "3"
    } ],
    "systemContextViews" : [ {
      "automaticLayout" : {
        "applied" : false,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "LeftRight",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "elements" : [ {
        "id" : "1",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "2",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "3",
        "x" : 0,
        "y" : 0
      } ],
      "enterpriseBoundaryVisible" : true,
      "key" : "SoftwareSystem",
      "order" : 1,
      "relationships" : [ {
        "id" : "7"
      }, {
        "id" : "9"
      } ],
      "softwareSystemId" : "3"
    } ]
  }
}

